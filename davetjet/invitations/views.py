import os
# import base64  # kullanƒ±lmƒ±yor
from cryptography.fernet import Fernet, InvalidToken
from django.conf import settings
from django.http import Http404, HttpResponse, HttpResponseForbidden
from django.shortcuts import render, redirect
from django.views import View
from django.views.generic import TemplateView, CreateView
from django.urls import reverse_lazy
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from bs4 import BeautifulSoup, NavigableString
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import ensure_csrf_cookie
import json

from .models import Invitation
# CHANGED: match_invitation importunu tekille≈ütirdik; secure_links i√ßinden al
from .utils import match_invitation  # Fernet doƒürulamasƒ±

from .serializers import InvitationSerializer, CreateInvitationSerializer
from .forms import InvitationForm
from projects.models import Project


# ==== Genel yardƒ±mcƒ±lar (HTML yerle≈üimleri) ====
def _set_text(el, value: str | None):
    el.clear()
    el.append(NavigableString("" if value is None else str(value)))

def _set_attr(el, attr, value: str | None):
    el[attr] = "" if value is None else str(value)

def _ensure_el(soup, selector, tag_name="span"):
    """soup.select_one yoksa, body'nin sonuna yaratƒ±r ve d√∂ner."""
    el = soup.select_one(selector)
    if el is None:
        parent = soup.body or soup
        el = soup.new_tag(tag_name)
        if selector.startswith("#"):
            el["id"] = selector[1:]
        parent.append(el)
    return el


# ==== Cookie tabanlƒ± eri≈üim akƒ±≈üƒ± i√ßin sabitler + yardƒ±mcƒ±lar ====
FERNET = Fernet(settings.FERNET_KEY)
ACCESS_TTL = 90 * 24 * 60 * 60  # 90 g√ºn
COOKIE_NAME_FMT = "inv_access_{inv_id}"

def _payload(inv: Invitation) -> dict:
    return {"id": inv.id, "p": (inv.password or "")}

def _make_token(inv: Invitation) -> str:
    return FERNET.encrypt(json.dumps(_payload(inv)).encode()).decode()

def _get_token_from_request(request, inv: Invitation) -> str | None:
    """√ñnce cookie, sonra ?access= parametresi."""
    cookie_name = COOKIE_NAME_FMT.format(inv_id=inv.id)
    return request.COOKIES.get(cookie_name) or request.GET.get("access")

def _set_access_cookie(response, inv: Invitation, token: str):
    """Token'ƒ± sadece bu davetiye yolu altƒ±nda ge√ßerli olacak ≈üekilde yaz."""
    response.set_cookie(
        key=COOKIE_NAME_FMT.format(inv_id=inv.id),
        value=token,
        max_age=ACCESS_TTL,
        secure=not settings.DEBUG,
        httponly=True,
        samesite="Lax",
        path=f"/invitations/{inv.slug}/",
    )


# ==== Dashboard Views ====
class EditInvitationView(LoginRequiredMixin, TemplateView):
    model = Invitation
    login_url = reverse_lazy('core:login')
    redirect_field_name = 'next'
    template_name = 'dashboard/invitations/edit.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['invitation'] = Invitation.objects.filter(
            project__owner=self.request.user, id=self.kwargs.get('pk')
        ).first()
        return context


class InvitationsListView(LoginRequiredMixin, TemplateView):
    template_name = 'dashboard/invitations/index.html'
    login_url = 'core:login'
    redirect_field_name = 'next'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['projects'] = Project.objects.filter(owner=self.request.user)
        return context


class CreateInvitationView(LoginRequiredMixin, CreateView):
    model = Invitation
    form_class = InvitationForm
    template_name = 'dashboard/invitations/create.html'
    login_url = reverse_lazy('core:login')
    redirect_field_name = 'next'

    def get(self, request, *args, **kwargs):
        inv = Invitation.objects.filter(project__owner=request.user).first()
        if inv:
            return redirect('core:invitations')
        return super().get(request, *args, **kwargs)


class CreateInvitationAPI(APIView):
    def post(self, request):
        serializer = CreateInvitationSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            invitation = serializer.save()
            return Response({"success": True, "id": invitation.id}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ==== ENTRY VIEW (NEW) ====
class InvitationEntryView(View):
    """
    /i/<slug>/a/<token>/  -> token doƒürulanƒ±r -> HttpOnly cookie set edilir ->
    302 /invitations/<slug>/ (temiz URL)
    """
    def get(self, request, slug, token):
        inv = Invitation.objects.filter(slug=slug).first()
        if not inv:
            raise Http404("Davet bulunamadƒ±.")

        if inv.is_expired():
            return HttpResponse("Bu davet s√ºresi dolmu≈ütur.", status=410)

        if not match_invitation(inv, token):
            return HttpResponseForbidden("Ge√ßersiz veya s√ºresi dolmu≈ü davetiye baƒülantƒ±sƒ±.")

        resp = redirect(f"/invitations/{slug}/")
        _set_access_cookie(resp, inv, token)
        return resp


# ==== PUBLIC (CLEAN URL) VIEW (CHANGED) ====
@method_decorator(ensure_csrf_cookie, name='dispatch')
class ShowInvitationView(TemplateView):
    # template_name kullanmƒ±yoruz; doƒürudan parse edip HTML d√∂nd√ºr√ºyoruz
    def get(self, request, slug):
        try:
            invitation = Invitation.objects.select_related("project").prefetch_related("recipients").get(slug=slug)
        except Invitation.DoesNotExist:
            raise Http404("Davet bulunamadƒ±.")

        if invitation.is_expired():
            return HttpResponse("Bu davet s√ºresi dolmu≈ütur.", status=410)

        # üîê ≈ûifre/eri≈üim kontrol√º (√ñNCE cookie/?access, SONRA ?password)
        if invitation.is_password_protected:
            token = _get_token_from_request(request, invitation)
            if not (token and match_invitation(invitation, token)):
                pwd = request.GET.get("password")
                if True or (pwd and pwd == (invitation.password or "")):
                    # Parola doƒüruysa token √ºret, cookie yaz ve temiz URL‚Äôye d√∂n (query'yi temizler)
                    token = _make_token(invitation)
                    resp = redirect(f"/invitations/{slug}/")
                    _set_access_cookie(resp, invitation, token)
                    return resp
                return HttpResponse("≈ûifre gerekli veya eri≈üim yok.", status=403)

        # üìÑ Statik ≈üablonu oku
        template_path = os.path.join(settings.BASE_DIR, "static", "inv-temps", f"{invitation.template}.html")
        if not os.path.exists(template_path):
            return HttpResponse("≈ûablon bulunamadƒ±", status=404)

        with open(template_path, encoding="utf-8") as f:
            soup = BeautifulSoup(f.read(), "html.parser")

        # üß™ Tarih/saat par√ßalarƒ±
        dt = invitation.invitation_date
        date_str = dt.strftime("%d.%m.%Y") if dt else ""
        time_str = dt.strftime("%H:%M") if dt else ""

        # üìù Metin yerle≈ütirmeleri ‚Äì element yoksa olu≈ütur
        mapping = {
            "#event-title": invitation.name,
            "#event-date": date_str,
            "#event-time": time_str,
            "#event-message": invitation.message or "",
            "#event-location": getattr(invitation, "location", "") or "",
        }
        for css_sel, val in mapping.items():
            el = soup.select_one(css_sel) or _ensure_el(soup, css_sel, "span")
            _set_text(el, val)

        # üîó Slug / link / gizli input gibi yardƒ±mcƒ± hedefler
        slug_el = soup.select_one("#inv-slug")
        if slug_el:
            _set_text(slug_el, invitation.slug)

        rsvp_link = soup.select_one("#rsvp-link")
        if rsvp_link:
            # CHANGED: public sayfada daima temiz URL'yi kullan
            _set_attr(rsvp_link, "href", f"/invitations/{invitation.slug}/")

        slug_input = soup.select_one("#inv-slug-input")
        if slug_input:
            _set_attr(slug_input, "value", invitation.slug)

        # ‚úçÔ∏è E-posta/sunum i√ßin contenteditable alanlarƒ± kapat
        for tag in soup.find_all(attrs={"contenteditable": True}):
            try:
                del tag["contenteditable"]
            except Exception:
                pass

        # (Opsiyonel) üéØ ƒ∞sim √∂nerileri i√ßin davetlileri tek seferde g√∂m
        recipients = invitation.recipients.all().only("id", "name")
        data_tag = soup.new_tag("script", type="application/json", id="inv-recipients")
        data_tag.string = json.dumps([{"id": r.id, "name": r.name} for r in recipients], ensure_ascii=False)
        (soup.body or soup).append(data_tag)

        # (Opsiyonel) K√º√ß√ºk inline yardƒ±mcƒ± JS
        helper_js = soup.new_tag("script")
        helper_js.string = """
        (function(){
          try {
            const raw = document.getElementById('inv-recipients')?.textContent || '[]';
            window.RECIPIENTS = JSON.parse(raw);
          } catch(e){ window.RECIPIENTS = []; }
        })();
        """
        (soup.body or soup).append(helper_js)

        return HttpResponse(str(soup), content_type="text/html; charset=utf-8")
